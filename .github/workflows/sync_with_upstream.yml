name: Sync with Upstream

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight UTC
  workflow_dispatch:
    inputs:
      strategy:
        description: 'merge (default) | rebase | ff-only'
        required: false
        default: 'merge'
      upstream_ref:
        description: 'Custom upstream ref (default: upstream/main)'
        required: false
        default: ''
      auto_merge_pr:
        description: 'Auto-merge workflow PR if only workflow files changed (true/false)'
        required: false
        default: 'false'
      clean_conflict_branches:
        description: 'Clean previously resolved conflict branches (true/false)'
        required: false
        default: 'true'
  push:
    branches:
      - main

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      UPSTREAM_REPO: vllm-project/vllm
      LOCAL_BRANCH: main
      GIT_AUTHOR_NAME: Zhuul
      GIT_AUTHOR_EMAIL: 40538530+Zhuul@users.noreply.github.com
      STRATEGY_INPUT: ${{ github.event.inputs.strategy }}
      UPSTREAM_REF_INPUT: ${{ github.event.inputs.upstream_ref }}
      AUTO_MERGE_PR: ${{ github.event.inputs.auto_merge_pr }}
      CLEAN_CONFLICT_BRANCHES: ${{ github.event.inputs.clean_conflict_branches }}

    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Git
        run: |
          git config --global user.name "$GIT_AUTHOR_NAME"
          git config --global user.email "$GIT_AUTHOR_EMAIL"
          git config --global pull.rebase false
          git config --global merge.ff only

      - name: Add upstream remote (if missing)
        run: |
          if ! git remote | grep -q '^upstream$'; then
            git remote add upstream "https://github.com/${UPSTREAM_REPO}.git"
          fi
          git remote -v

      - name: Fetch upstream (all tags, prune)
        run: |
          git fetch --tags --prune upstream '+refs/heads/*:refs/remotes/upstream/*'
          echo "Upstream heads:"; git branch -r | grep upstream/ || true

      - name: Choose upstream ref
        id: choose_ref
        run: |
          ref="${UPSTREAM_REF_INPUT:-upstream/main}"
          echo "ref=$ref" >> "$GITHUB_OUTPUT"
          git show-ref --verify --quiet "refs/remotes/${ref#upstream/}" || {
            echo "Specified upstream ref $ref not found" >&2; exit 1; }

      - name: Detect divergence
        id: divergence
        run: |
          git checkout "$LOCAL_BRANCH"
          upstream_ref='${{ steps.choose_ref.outputs.ref }}'
          base=$(git merge-base "$LOCAL_BRANCH" "$upstream_ref")
          ahead_local=$(git rev-list --count "$upstream_ref".."$LOCAL_BRANCH")
          ahead_upstream=$(git rev-list --count "$LOCAL_BRANCH".."$upstream_ref")
          echo "base_sha=$base" >> "$GITHUB_OUTPUT"
          echo "ahead_local=$ahead_local" >> "$GITHUB_OUTPUT"
          echo "ahead_upstream=$ahead_upstream" >> "$GITHUB_OUTPUT"
          echo "Local ahead: $ahead_local / Upstream ahead: $ahead_upstream"

      - name: Fast-forward if possible
        id: ff
        if: steps.divergence.outputs.ahead_local == '0'
        run: |
          upstream_ref='${{ steps.choose_ref.outputs.ref }}'
          git merge --ff-only "$upstream_ref" || exit 1
          echo "did_ff=true" >> "$GITHUB_OUTPUT"
        continue-on-error: false

      - name: Merge / Rebase fallback
        id: merge
        if: steps.ff.outputs.did_ff != 'true'
        run: |
          strategy=${STRATEGY_INPUT:-merge}
          upstream_ref='${{ steps.choose_ref.outputs.ref }}'
          echo "Using strategy: $strategy"
          case "$strategy" in
            ff-only)
              echo "Fast-forward only requested but not possible" >&2; exit 1 ;;
            rebase)
              if ! git rebase "$upstream_ref"; then
                echo "Rebase conflict; aborting and creating conflict branch" >&2
                git rebase --abort || true
                strategy=merge
              else
                echo "conflict=false" >> "$GITHUB_OUTPUT"
                exit 0
              fi
              ;;
          esac
          # Merge path (default or after failed rebase)
          if git merge --no-edit "$upstream_ref"; then
            echo "conflict=false" >> "$GITHUB_OUTPUT"
          else
            echo "Merge conflict detected. Creating a new branch for manual resolution."
            BRANCH="merge-conflict-$(date +%Y%m%d%H%M%S)"
            git checkout -b "$BRANCH"
            git status --porcelain > conflict-status.txt || true
            git diff > conflict-diff.patch || true
            echo "conflict=true" >> "$GITHUB_OUTPUT"
            echo "conflict_branch=$BRANCH" >> "$GITHUB_OUTPUT"
          fi

      - name: Check for workflow file changes
        id: workflow_change
        run: |
          upstream_ref='${{ steps.choose_ref.outputs.ref }}'
          if git diff --name-only "$upstream_ref" | grep '^.github/workflows/'; then
            echo "workflow_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "workflow_changed=false" >> "$GITHUB_OUTPUT"
          fi

      # Use GITHUB_TOKEN for authentication, sufficient for repo write access in actions
      - name: Set up authentication
        run: |
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Push changes (fast-forward or merged)
        if: steps.workflow_change.outputs.workflow_changed == 'false' && steps.merge.outputs.conflict == 'false'
        run: git push origin "$LOCAL_BRANCH"

      - name: Create Pull Request for workflow file changes
        if: steps.workflow_change.outputs.workflow_changed == 'true' && steps.merge.outputs.conflict == 'false'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Sync: update workflow files from upstream"
          title: "Sync: update workflow files from upstream"
          body: |
            Workflow files were updated upstream and require review.
            Upstream ref: ${{ steps.choose_ref.outputs.ref }}
          branch: workflow-sync-${{ github.run_id }}
          base: main

      - name: Auto-merge workflow PR (optional)
        if: steps.workflow_change.outputs.workflow_changed == 'true' && steps.merge.outputs.conflict == 'false' && env.AUTO_MERGE_PR == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prs = await github.rest.pulls.list({ owner: context.repo.owner, repo: context.repo.repo, state: 'open', head: `${context.repo.owner}:workflow-sync-${context.runId}` });
            if (prs.data.length === 1) {
              const pr = prs.data[0];
              await github.rest.pulls.merge({ owner: context.repo.owner, repo: context.repo.repo, pull_number: pr.number, merge_method: 'squash' });
              core.notice(`Auto-merged PR #${pr.number}`);
            } else {
              core.warning('Expected exactly one workflow sync PR to auto-merge. Skipping.');
            }

      # Notification step: create an issue if merge conflict detected
      - name: Upload conflict artifacts
        if: steps.merge.outputs.conflict == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: upstream-conflict-artifacts
          path: |
            conflict-status.txt
            conflict-diff.patch

      - name: Create Issue on Merge / Rebase Conflict
        if: steps.merge.outputs.conflict == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = '${{ steps.merge.outputs.conflict_branch }}';
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Upstream Sync Conflict',
              body: `A conflict occurred while syncing with upstream (${process.env.UPSTREAM_REPO}).\n\nConflict branch: ${branch}\nArtifacts: see workflow run.\n\nResolve by checking out the branch and completing the merge or rebase.`
            });

      - name: Cleanup previously resolved conflict branches
        if: env.CLEAN_CONFLICT_BRANCHES == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: branches } = await github.rest.repos.listBranches({ owner: context.repo.owner, repo: context.repo.repo, protected: false, per_page: 100 });
            const mainSha = (await github.rest.repos.getBranch({ owner: context.repo.owner, repo: context.repo.repo, branch: process.env.LOCAL_BRANCH })).data.commit.sha;
            const stale = [];
            for (const b of branches) {
              if (!b.name.startsWith('merge-conflict-')) continue;
              try {
                const { data: cmp } = await github.rest.repos.compareCommits({ owner: context.repo.owner, repo: context.repo.repo, base: b.name, head: process.env.LOCAL_BRANCH });
                // If main contains all commits from conflict branch (status ahead or diverged with total behind=0)
                if (cmp.status === 'ahead' || (cmp.status === 'diverged' && cmp.behind_by === 0)) {
                  stale.push(b.name);
                }
              } catch(e) {
                core.warning(`Compare failed for branch ${b.name}: ${e}`);
              }
            }
            for (const name of stale) {
              try {
                await github.rest.git.deleteRef({ owner: context.repo.owner, repo: context.repo.repo, ref: `heads/${name}` });
                core.notice(`Deleted stale conflict branch ${name}`);
              } catch(e) {
                core.warning(`Failed to delete ${name}: ${e}`);
              }
            }
            core.notice(`Cleanup complete. Deleted ${stale.length} stale conflict branches.`);

      - name: Log completion summary
        run: |
          echo "Sync complete. Strategy input: ${STRATEGY_INPUT:-merge}";
          echo "Fast-forward performed: ${{ steps.ff.outputs.did_ff || 'false' }}";
          echo "Conflict: ${{ steps.merge.outputs.conflict || 'false' }}";
          echo "Upstream ref used: ${{ steps.choose_ref.outputs.ref }}";
