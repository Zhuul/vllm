diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5792dc082..6e8bb71c0 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -20,8 +20,31 @@ message(STATUS "Target device: ${VLLM_TARGET_DEVICE}")

 include(${CMAKE_CURRENT_LIST_DIR}/cmake/utils.cmake)

+set(_VLLM_OPTIONAL_CUDA_LIBS
+  CUBLAS
+  CUDNN
+  CUFILE
+  CUSPARSE
+  CUSPARSELT
+  CUDSS)
+set(VLLM_ENABLED_OPTIONAL_CUDA_LIBS)
+foreach(_lib ${_VLLM_OPTIONAL_CUDA_LIBS})
+  set(_opt "USE_${_lib}")
+  option(${_opt} "Enable optional CUDA component ${_lib}" ON)
+  if(${_opt})
+    list(APPEND VLLM_ENABLED_OPTIONAL_CUDA_LIBS ${_lib})
+  endif()
+endforeach()
+if(VLLM_ENABLED_OPTIONAL_CUDA_LIBS)
+  list(JOIN VLLM_ENABLED_OPTIONAL_CUDA_LIBS ", " _vllm_enabled_cuda_libs_joined)
+  message(STATUS "Optional CUDA components enabled: ${_vllm_enabled_cuda_libs_joined}")
+else()
+  message(STATUS "Optional CUDA components enabled: (none)")
+endif()
+
 # Suppress potential warnings about unused manually-specified variables
 set(ignoreMe "${VLLM_PYTHON_PATH}")

 # Prevent installation of dependencies (cutlass) by default.
 install(CODE "set(CMAKE_INSTALL_LOCAL_ONLY TRUE)" ALL_COMPONENTS)

diff --git a/setup.py b/setup.py
index 8656d12ad..f3bcd9a9d 100644
--- a/setup.py
+++ b/setup.py
@@ -217,7 +217,28 @@ class cmake_build_ext(build_ext):
         # Make sure we use the nvcc from CUDA_HOME
         if _is_cuda():
             cmake_args += [f"-DCMAKE_CUDA_COMPILER={CUDA_HOME}/bin/nvcc"]

+        cuda_optional_envs = {
+            "USE_CUBLAS": os.getenv("USE_CUBLAS"),
+            "USE_CUDNN": os.getenv("USE_CUDNN"),
+            "USE_CUFILE": os.getenv("USE_CUFILE"),
+            "USE_CUSPARSE": os.getenv("USE_CUSPARSE"),
+            "USE_CUSPARSELT": os.getenv("USE_CUSPARSELT"),
+            "USE_CUDSS": os.getenv("USE_CUDSS"),
+        }
+        for key, value in cuda_optional_envs.items():
+            if value is None:
+                continue
+            normalized = value.strip().lower()
+            if not normalized:
+                continue
+            if normalized in {"1", "on", "true", "yes"}:
+                cmake_args.append(f"-D{key}=ON")
+            elif normalized in {"0", "off", "false", "no"}:
+                cmake_args.append(f"-D{key}=OFF")
+            else:
+                cmake_args.append(f"-D{key}={value}")
+
         other_cmake_args = os.environ.get("CMAKE_ARGS")
         if other_cmake_args:
             cmake_args += other_cmake_args.split()
